FUNCTIONAL COMPONENTS
    
    1). Definition:
            -> Functional components are JS functions that return JSX.
            -> Regular JS functions.
            -> The functions will return the JSX.

    2). Syntax:
            -> They are writing  regular JS functions, often using arrow function syntax.

    3). Stateless:
            -> Functional components are stateless by default, meaning they don't have their own internal state.
            -> They rely on props passed from parent components.

    Note : A stateless component, also known as a functional component, is a fundamental concept in react that represents a UI element without any internal state management.

    4) State Management:

            -> State Management in React applications that enable you to modularize and that will encapsulate the updates of states.
            -> Therefore, you can maintain and debug your codebase.
            -> Prior to React 16.8, functional component couldn't manage state.
            -> With Introduction of Hooks, they can now manage state using the 'useState hook.

    5) Lifecycle:
            -> Functional component don't have Lifecycle method like class components. 
            -> Instead, they can use Hooks like 'useEffect' to replicate lifecycle behavior. 

    6). Performance:
            -> Functional components are generally considered more lightweight and easier to optimize, as they don't involved the overhead of class component instances.

    7). Readability:
            -> Functional component can be more concise and easier to read, especially or simpler UI render.

    8). Code Organizational:
            -> Functional component promote functional programming concept and modular code organization.       